{"version":3,"sources":["logo.svg","pages/mainpage.js","App.js","reportWebVitals.js","index.js"],"names":["formItemLayout","Input","Search","labelCol","xs","span","sm","wrapperCol","QuestionPage","document","getElementById","inputRef","useRef","useState","question","answer","available","questionList","setQuestionList","questionIndex","setQuestionIndex","validationIndex","setValidationIndex","formInput","setFormInput","visible","setVisible","onChange","checkedValues","map","val","target","value","checked","checkboxGenerate","inputval","checkboxes","setCheckboxes","useEffect","clickedContinue","current","input","toLowerCase","setTimeout","newQuestionIndex","length","className","style","margin","type","onClick","title","placement","closable","onClose","id","event","xlsxfile","files","then","rows","row","Item","label","hasFeedback","validateStatus","onKeyPress","e","key","ref","placeholder","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.17db91a8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Card, Input, Form, Button, Drawer, Checkbox } from 'antd';\r\nimport './mainpage.css'\r\nimport xlsxfile from 'read-excel-file'\r\nimport fs from 'fs'\r\nconst { Search } = Input;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 5 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 12 },\r\n    },\r\n};\r\n\r\nfunction QuestionPage() {\r\n    const input = document.getElementById('input')\r\n\r\n    const inputRef = useRef(null)\r\n    const [questionList, setQuestionList] = useState([\r\n        { question: \"lütfen soru yükle\", answer: \"aslabilemezsin\", available: true }])\r\n\r\n    const [questionIndex, setQuestionIndex] = useState(0)\r\n\r\n    const [validationIndex, setValidationIndex] = useState(0)\r\n    const [formInput, setFormInput] = useState(\"\")\r\n\r\n    const validationArray = [\"\", \"success\", \"error\"]\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const showDrawer = () => {\r\n        setVisible(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    function onChange(checkedValues) {\r\n        setQuestionList(questionList.map(val => {\r\n            if (val.question === checkedValues.target.value)\r\n                val.available = checkedValues.target.checked\r\n            return val\r\n        })) \r\n    }\r\n\r\n    function checkboxGenerate() {\r\n        return questionList.map(inputval => {\r\n            return <><Checkbox\r\n                onChange={onChange}\r\n                value={inputval.question}\r\n                checked={inputval.available}>{inputval.question}\r\n            </Checkbox><br /></>\r\n        })\r\n    }\r\n\r\n    const changeHandler = (event) => {\r\n        xlsxfile(event.target.files[0]).then((rows) => {\r\n            setQuestionList(rows.map(row=>{return {question: row[0], answer: row[1], available: true }}))\r\n        })\r\n    }\r\n\r\n    const [checkboxes, setCheckboxes] = useState(checkboxGenerate())\r\n\r\n    useEffect(() => {\r\n        setCheckboxes(checkboxGenerate())\r\n    }, [questionList])\r\n\r\n    const clickedContinue = (value) => {\r\n        const answer = inputRef.current.input.value;\r\n        // console.log(answer)\r\n        if (questionList[questionIndex].answer.toLowerCase() === answer.toLowerCase()) {\r\n            setValidationIndex(1)\r\n            setTimeout(() => {\r\n                let newQuestionIndex = questionIndex;\r\n                do {\r\n                    newQuestionIndex = (newQuestionIndex + 1) % questionList.length;\r\n                } while (!(questionList[newQuestionIndex].available))\r\n                setQuestionIndex((newQuestionIndex) % questionList.length)\r\n                // console.log(questionList[newQuestionIndex])\r\n                setFormInput(\"\");\r\n            }, 1000)\r\n        } else {\r\n            setValidationIndex(2)\r\n            // console.log(questionList[questionIndex].answer.toLowerCase(), answer.toLowerCase)\r\n        }\r\n        setTimeout(() => {\r\n            setValidationIndex(0)\r\n        }, 1000)\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainpage\">\r\n            <Button style={{ margin: '20px' }} type=\"primary\" onClick={showDrawer}>\r\n                Soru ekle / düzenle\r\n      </Button>\r\n            <Drawer\r\n                title=\"Edit Questions\"\r\n                placement=\"left\"\r\n                closable={false}\r\n                onClose={onClose}\r\n                visible={visible}\r\n            >\r\n                {checkboxes}\r\n                <input style={{margin:'20px'}} type=\"file\" id=\"input\" onChange={changeHandler}/>\r\n            </Drawer>\r\n            <Card title={questionList[questionIndex].question} className=\"cardstyling\">\r\n                <Form>\r\n                    <Form.Item label=\"Cevap\" hasFeedback validateStatus={validationArray[validationIndex]}>\r\n                        <Input onKeyPress={e => e.key === 'Enter' ? clickedContinue() : null} value={formInput} onChange={(e) => { setFormInput(e.target.value) }} ref={inputRef} placeholder=\"Cevabını buraya\" id=\"success\" />\r\n                    </Form.Item>\r\n                    <Form.Item {...formItemLayout}>\r\n                        <Button type=\"primary\" onClick={clickedContinue} onKeyPress={e => e.key === 'Enter' ? clickedContinue() : null}>\r\n                            Kontrol et\r\n                    </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionPage;","import logo from './logo.svg';\nimport \"antd/dist/antd.css\";\nimport './App.css';\nimport QuestionPage from './pages/mainpage';\n\nfunction App() {\n  return (\n    <QuestionPage/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}